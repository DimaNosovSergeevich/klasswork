#1 
def mid(data_in):
    data_in = list(((str(data_in)).strip()).split(" "))
    data_str_num = []
 
    for i in data_in:
        if i != '':
            data_str_num.append(int(i))
        else:
            continue
 
    return str(round((sum(data_str_num) / len(data_str_num)), 1))
 
 
while var := input():
    print(mid(var))
    
#2 
 a = input()
k=0
pes = 0
jail = 0
chance = 0
i=-999
while a!='':
    if i == k:
        k=0
        i=-999
    a = a.replace("@", "").replace("#", "").replace("%", "")
    a = list(a)
    i = a.count('!')
    if i > 0:
        if '!' == a[0] and i>=0:
            a = ''.join(a)
            a = a.upper()
            a = list(a)
            while i>k:
                a.remove('!')
                k+=1
            print(''.join(a))
        elif '!' != a[0] and i>0:
            a = ''.join(a)
            a = a.lower()
            a = list(a)
            while i>k:
                a.remove('!')
                k+=1
            print(''.join(a))
    else:
        a=''.join(a)
        print(a.lower())
    a = input()
    
#3 
a,b,c = map(int,input().split())
for i in range(a,b,c):
    if i%2!=0:
        print(i**2)
    else:
        print(-i)

#4
def fibonacci(n):
    if n == 1 or n == 2:

        return 1

    else:

        return fibonacci(n-1) + fibonacci(n-2)



n = int(input())

result = fibonacci(n)

print(result)

#5
def my_map(func, seq):

    for item in seq:

        yield func(item)

my_list = range(-10,11,2)

lambda_func = lambda x: x ** 2

result = my_map(lambda_func, my_list)

for item in result:
    print(item)
    
#6
def filter(func, seq):
  for item in seq:
    if func(item):
      yield item

func_in, seq_in = eval(input()), eval(input())

#7
def cache_deco(func):
  cache = {}

  def wrapper(*args):
    if args not in cache:
      cache[args] = func(*args)
    return cache[args]

  return wrapper

code = []
while data := input():
  code.append(data)
code = "\n".join(code)
exec(code)

#8
def repeat_deco(n=1):
  def decorator(func):
    def wrapper(*args, **kwargs):
      result = None
      for _ in range(n):
        result = func(*args, **kwargs)
      return result
    return wrapper
  return decorator

code = []
while data := input():
  code.append(data)
code = "\n".join(code)
exec(code)

for x in filter(func_in, seq_in):
  print(x)

#9 
a = int(input())

def f():
  global a  
  a += 10  
  
f()

print(a)

#10
def g():
  b = int(input())
  def h():
    nonlocal b  
    b += 10
  h()
  print(b)
g()
